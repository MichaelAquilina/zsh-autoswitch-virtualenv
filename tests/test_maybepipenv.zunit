#!/usr/bin/env zunit


@setup {
    source =virtualenvwrapper.sh

    echo "Creating test pipenv"
    run pipenv --python 3

    PYTHON_VERSION="$(python3 --version 2>&1)"

    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    TARGET="$(mktemp -d)"
}

@teardown {
    rm -rf "$TARGET"
    run deactivate 2>/dev/null
    run pipenv --rm
    rm -rf Pipfile
}


@test '_maybepipenv - switches virtualenv if nothing is activated' {
    VIRTUAL_ENV=""

    run _maybepipenv "$(pipenv --venv)"

    assert $state equals 0
    assert "$output" matches "Switching pipenv: $(basename "$PWD")-[^\s]{8}  \[Python 3.6.5\]"


}

@test '_maybepipenv - switches virtualenv if current virtualenv is different' {
    VIRTUAL_ENV="$HOME/.virtualenvs/default_venv"

    run _maybepipenv "$(pipenv --venv)"

    assert $state equals 0
    assert "$output" matches "Switching pipenv: $(basename "$PWD")-[^\s]{8}  \[Python 3.6.5\]"
}

@test '_maybepipenv - switches virtualenv if current virtualenv is different (silent)' {
    VIRTUAL_ENV="$HOME/.virtualenvs/default_venv"
    AUTOSWITCH_SILENT="1"

    run _maybepipenv "$(pipenv --venv)"

    assert $state equals 0
    assert "$output" is_empty
}

@test '_maybepipenv - does not switch to already activated virtualenv' {
    VIRTUAL_ENV="$(pipenv --venv)"

    run _maybepipenv "$(pipenv --venv)"

    assert $state equals 0
    assert "$output" is_empty
}
