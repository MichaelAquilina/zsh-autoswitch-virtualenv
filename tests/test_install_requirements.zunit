#!/usr/bin/env zunit

@setup {
    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    unset AUTOSWITCH_DEFAULT_REQUIREMENTS

    function read {
        eval $1=\"y\"
        echo y
    }

    TARGET="$(mktemp -d)"
    cd "$TARGET"
}

@teardown {
    rm -rf "$TARGET"
}

@test 'install_requirements - does nothing if no files found' {
    run install_requirements

    assert $status equals 0
    assert "$output" is_empty
}

@test 'install_requirements - does not install with no input' {
    echo "django" > requirements.txt
    echo "pytest" > dev-requirements.txt

    # override default mock to return nothing
    function read {
        eval $1=\"\"
        echo ""
    }

    # mock pip to make it testable
    function pip {
        echo "pip $@"
        cat "$3"
    }

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35mdev-requirements.txt\e[0m file. Install? [y/N]: "
    assert "$lines[2]" same_as "Found a \e[35mrequirements.txt\e[0m file. Install? [y/N]: "
}

@test 'install_requirements - installs default requirements' {
    AUTOSWITCH_DEFAULT_REQUIREMENTS="$(mktemp -d)/default-requirements.txt"
    echo "django" > "$AUTOSWITCH_DEFAULT_REQUIREMENTS"

    # mock pip to make it testable
    function pip {
        echo "pip $@"
        cat "$3"
    }

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Install default requirements? (\e[35m$AUTOSWITCH_DEFAULT_REQUIREMENTS\e[0m) [y/N]: y"
    assert "$lines[2]" same_as "pip install -r $AUTOSWITCH_DEFAULT_REQUIREMENTS"
    assert "$lines[3]" same_as "django"
}

@test 'install_requirements - installs *requirements.txt' {
    echo "django" > requirements.txt
    echo "pytest" > dev-requirements.txt

    # mock pip to make it testable
    function pip {
        echo "pip $@"
        cat "$3"
    }

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35mdev-requirements.txt\e[0m file. Install? [y/N]: y"
    assert "$lines[2]" same_as "pip install -r dev-requirements.txt"
    assert "$lines[3]" same_as "pytest"
    assert "$lines[4]" same_as "Found a \e[35mrequirements.txt\e[0m file. Install? [y/N]: y"
    assert "$lines[5]" same_as "pip install -r requirements.txt"
    assert "$lines[6]" same_as "django"
}

@test 'install_requirements - installs setup.py' {
    touch "setup.py"
    echo "django" > requirements.txt

    # mock pip to make it testable
    function pip {
        echo "pip $@"
    }

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35msetup.py\e[0m file. Install dependencies? [y/N]: y"
    assert "$lines[2]" same_as "pip install -e ."
}

@test 'install_requirements - installs pyproject.toml' {
    touch "pyproject.toml"

    # mock pip to make it testable
    function pip {
        echo "pip $@"
    }

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35mpyproject.toml\e[0m file. Install dependencies? [y/N]: y"
    assert "$lines[2]" same_as "Found a pyproject.toml file, but editable mode currently requires a setup.py based build.\n"
}

@test 'install_requirements - installs recursive *requirements.txt' {
    echo "django" > requirements.txt
    mkdir subdir
    echo "pytest" > subdir/dev-requirements.txt

    # mock pip to make it testable
    function pip {
        echo "pip $@"
        cat "$3"
    }

    run install_requirements
    echo "output is $output"

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35mrequirements.txt\e[0m file. Install? [y/N]: y"
    assert "$lines[2]" same_as "pip install -r requirements.txt"
    assert "$lines[3]" same_as "django"
    assert "$lines[4]" same_as "Found a \e[35msubdir/dev-requirements.txt\e[0m file. Install? [y/N]: y"
    assert "$lines[5]" same_as "pip install -r subdir/dev-requirements.txt"
    assert "$lines[6]" same_as "pytest"
}

@test 'install_requirements - installs setup.py' {
    touch "setup.py"
    echo "django" > requirements.txt

    # mock pip to make it testable
    function pip {
        echo "pip $@"
    }
    local AUTOSWITCH_PIPINSTALL="FULL"

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35msetup.py\e[0m file. Install dependencies? [y/N]: y"
    assert "$lines[2]" same_as "pip install ."
}

@test 'install_requirements - installs pyproject.toml - full' {
    touch "pyproject.toml"

    # mock pip to make it testable
    function pip {
        echo "pip $@"
    }
    local AUTOSWITCH_PIPINSTALL="FULL"

    run install_requirements

    assert $status equals 0
    assert "$lines[1]" same_as "Found a \e[35mpyproject.toml\e[0m file. Install dependencies? [y/N]: y"
    assert "$lines[2]" same_as "pip install ."
}
