#!/usr/bin/env zunit

@setup {
    function virtualenv {
        echo virtualenv $@
    }

    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    unset AUTOSWITCH_DEFAULT_REQUIREMENTS
    TARGET="$(mktemp -d)"
    cd "$TARGET"

    function poetry {
        echo "poetry" $@
    }

    function _activate_poetry {
        echo "activating poetry"
    }

    function pipenv {
        echo "pipenv" $@
    }

    function _activate_pipenv {
        echo "activating pipenv"
    }

    function uv {
        echo "uv" $@
    }

    function _activate_uv {
        echo "activating uv"
    }
}

@teardown {
    rm -rf "$TARGET"
}

@test 'mkvenv - does not create .venv if one exists' {
    touch .venv

    run mkvenv

    assert $status equals 0
    assert "$output" same_as ".venv file already exists. If this is a mistake use the rmvenv command"
}


@test 'mkvenv - creates .venv' {
    mkdir myproject
    cd myproject

    run mkvenv

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" matches "myproject-[a-z]{4}"
}

@test 'mkvenv - (poetry project) runs correct command' {
    mkdir myproject
    cd myproject
    touch "poetry.lock"

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" same_as "poetry install"
    assert "$lines[2]" same_as "activating poetry"
}

@test 'mkvenv - (pipenv project) runs correct command' {
    mkdir myproject
    cd myproject
    touch "Pipfile"

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" same_as "pipenv install --dev"
    assert "$lines[2]" same_as "activating pipenv"
}

@test 'mkvenv - (uv project) runs correct command' {
    mkdir myproject
    cd myproject
    touch "uv.lock"

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" same_as "uv sync"
    assert "$lines[2]" same_as "activating uv"
}

@test 'mkvenv - uses default python if set and not specified' {
    mkdir myproject
    cd myproject
    AUTOSWITCH_DEFAULT_PYTHON="python_foo"

    run mkvenv

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists
    # Assert mock output

    expected='Using $AUTOSWITCH_DEFAULT_PYTHON=python_foo'
    assert "$lines[2]" contains "$expected"
    expected="virtualenv --python=python_foo $HOME/.virtualenvs/myproject-"
    assert "$lines[3]" contains "$expected"

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" matches "myproject-[a-z]{4}"
}

@test 'mkvenv - uses specified python if default set' {
    # mock virtualenv function to test its inputs
    function virtualenv {
        echo virtualenv $@
    }

    mkdir myproject
    cd myproject
    AUTOSWITCH_DEFAULT_PYTHON="python_foo"

    run mkvenv --python=python_bar

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists
    # Assert mock output
    assert "$lines[2]" contains "virtualenv --python=python_bar $HOME/.virtualenvs/myproject-"

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" matches "myproject-[a-z]{4}"
}

@test 'prints help message and disables plugin if virtualenv not setup' {
    # Mock type to fail
    function type() {
        if [[ "$1" == "virtualenv" ]]; then
            return 1
        fi
        return 0
    }

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" contains "zsh-autoswitch-virtualenv requires 'virtualenv' to install this project!"
    assert "$lines[2]" is_empty
    assert "$lines[3]" contains "If this is already installed but you are still seeing this message,"
    assert "$lines[4]" contains "then make sure the \e[1mvirtualenv\e[0m command is in your PATH.\n"
    assert "$lines[5]" is_empty
    assert ${#lines} equals 4
}

@test 'prints help message and disables plugin if poetry not setup' {
    touch "poetry.lock"

    # Mock type to fail
    function type() {
        if [[ "$1" == "poetry" ]]; then
            return 1
        fi
        return 0
    }

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" contains "zsh-autoswitch-virtualenv requires 'poetry' to install this project!"
    assert "$lines[2]" is_empty
    assert "$lines[3]" contains "If this is already installed but you are still seeing this message,"
    assert "$lines[4]" contains "then make sure the \e[1mpoetry\e[0m command is in your PATH.\n"
    assert "$lines[5]" is_empty
    assert ${#lines} equals 4
}

@test 'prints help message and disables plugin if pipenv not setup' {
    touch "Pipfile"

    # Mock type to fail
    function type() {
        if [[ "$1" == "pipenv" ]]; then
            return 1
        fi
        return 0
    }

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" contains "zsh-autoswitch-virtualenv requires 'pipenv' to install this project!"
    assert "$lines[2]" is_empty
    assert "$lines[3]" contains "If this is already installed but you are still seeing this message,"
    assert "$lines[4]" contains "then make sure the \e[1mpipenv\e[0m command is in your PATH.\n"
    assert "$lines[5]" is_empty
    assert ${#lines} equals 4
}

@test 'prints help message and disables plugin if uv not setup' {
    touch "uv.lock"

    # Mock type to fail
    function type() {
        if [[ "$1" == "uv" ]]; then
            return 1
        fi
        return 0
    }

    run mkvenv

    assert $status equals 0
    assert "$lines[1]" contains "zsh-autoswitch-virtualenv requires 'uv' to install this project!"
    assert "$lines[2]" is_empty
    assert "$lines[3]" contains "If this is already installed but you are still seeing this message,"
    assert "$lines[4]" contains "then make sure the \e[1muv\e[0m command is in your PATH.\n"
    assert "$lines[5]" is_empty
    assert ${#lines} equals 4
}
